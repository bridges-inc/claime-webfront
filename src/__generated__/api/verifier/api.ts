/* tslint:disable */
/* eslint-disable */
/**
 * Claime Verifier
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Configuration } from './configuration'
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios'
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from './common'
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError,
} from './base'

/**
 *
 * @export
 * @interface Claim
 */
export interface Claim {
  /**
   *
   * @type {string}
   * @memberof Claim
   */
  propertyType: string
  /**
   *
   * @type {string}
   * @memberof Claim
   */
  propertyId: string
  /**
   *
   * @type {string}
   * @memberof Claim
   */
  method: string
  /**
   *
   * @type {string}
   * @memberof Claim
   */
  evidence: string
}
/**
 *
 * @export
 * @interface VerifierOutput
 */
export interface VerifierOutput {
  /**
   *
   * @type {string}
   * @memberof VerifierOutput
   */
  result: VerifierOutputResultEnum
  /**
   *
   * @type {string}
   * @memberof VerifierOutput
   */
  error?: string
  /**
   *
   * @type {Claim}
   * @memberof VerifierOutput
   */
  claim: Claim
  /**
   * unix timestamp verified at
   * @type {string}
   * @memberof VerifierOutput
   */
  at: string
  /**
   *
   * @type {VerifierOutputActual}
   * @memberof VerifierOutput
   */
  actual?: VerifierOutputActual
}

/**
 * @export
 * @enum {string}
 */
export enum VerifierOutputResultEnum {
  Verified = 'Verified',
  Failed = 'Failed',
  Unsupported = 'Unsupported',
}

/**
 * hex address got
 * @export
 * @interface VerifierOutputActual
 */
export interface VerifierOutputActual {
  /**
   *
   * @type {string}
   * @memberof VerifierOutputActual
   */
  propertyId: string
  /**
   *
   * @type {Array<string>}
   * @memberof VerifierOutputActual
   */
  evidences?: Array<string>
  /**
   *
   * @type {Array<string>}
   * @memberof VerifierOutputActual
   */
  eoas?: Array<string>
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     *
     * @param {string} eoa
     * @param {string} propertyType
     * @param {string} propertyId
     * @param {string} method
     * @param {string} evidence
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    testVerify: async (
      eoa: string,
      propertyType: string,
      propertyId: string,
      method: string,
      evidence: string,
      options: any = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'eoa' is not null or undefined
      assertParamExists('testVerify', 'eoa', eoa)
      // verify required parameter 'propertyType' is not null or undefined
      assertParamExists('testVerify', 'propertyType', propertyType)
      // verify required parameter 'propertyId' is not null or undefined
      assertParamExists('testVerify', 'propertyId', propertyId)
      // verify required parameter 'method' is not null or undefined
      assertParamExists('testVerify', 'method', method)
      // verify required parameter 'evidence' is not null or undefined
      assertParamExists('testVerify', 'evidence', evidence)
      const localVarPath = `/test/verify/{eoa}`.replace(
        `{${'eoa'}}`,
        encodeURIComponent(String(eoa)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (propertyType !== undefined) {
        localVarQueryParameter['propertyType'] = propertyType
      }

      if (propertyId !== undefined) {
        localVarQueryParameter['propertyId'] = propertyId
      }

      if (method !== undefined) {
        localVarQueryParameter['method'] = method
      }

      if (evidence !== undefined) {
        localVarQueryParameter['evidence'] = evidence
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @param {string} eoa eoa hex address
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    verify: async (eoa: string, options: any = {}): Promise<RequestArgs> => {
      // verify required parameter 'eoa' is not null or undefined
      assertParamExists('verify', 'eoa', eoa)
      const localVarPath = `/verify/{eoa}`.replace(
        `{${'eoa'}}`,
        encodeURIComponent(String(eoa)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
  return {
    /**
     *
     * @param {string} eoa
     * @param {string} propertyType
     * @param {string} propertyId
     * @param {string} method
     * @param {string} evidence
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async testVerify(
      eoa: string,
      propertyType: string,
      propertyId: string,
      method: string,
      evidence: string,
      options?: any,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<Array<VerifierOutput>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.testVerify(
        eoa,
        propertyType,
        propertyId,
        method,
        evidence,
        options,
      )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      )
    },
    /**
     *
     * @param {string} eoa eoa hex address
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async verify(
      eoa: string,
      options?: any,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<Array<VerifierOutput>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.verify(
        eoa,
        options,
      )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      )
    },
  }
}

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = DefaultApiFp(configuration)
  return {
    /**
     *
     * @param {string} eoa
     * @param {string} propertyType
     * @param {string} propertyId
     * @param {string} method
     * @param {string} evidence
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    testVerify(
      eoa: string,
      propertyType: string,
      propertyId: string,
      method: string,
      evidence: string,
      options?: any,
    ): AxiosPromise<Array<VerifierOutput>> {
      return localVarFp
        .testVerify(eoa, propertyType, propertyId, method, evidence, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @param {string} eoa eoa hex address
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    verify(eoa: string, options?: any): AxiosPromise<Array<VerifierOutput>> {
      return localVarFp
        .verify(eoa, options)
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
  /**
   *
   * @param {string} eoa
   * @param {string} propertyType
   * @param {string} propertyId
   * @param {string} method
   * @param {string} evidence
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public testVerify(
    eoa: string,
    propertyType: string,
    propertyId: string,
    method: string,
    evidence: string,
    options?: any,
  ) {
    return DefaultApiFp(this.configuration)
      .testVerify(eoa, propertyType, propertyId, method, evidence, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @param {string} eoa eoa hex address
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public verify(eoa: string, options?: any) {
    return DefaultApiFp(this.configuration)
      .verify(eoa, options)
      .then((request) => request(this.axios, this.basePath))
  }
}
