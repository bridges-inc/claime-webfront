/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface RegistryContractInterface extends ethers.utils.Interface {
  functions: {
    "allClaimKeys(address,uint256)": FunctionFragment;
    "allClaimRefs(address)": FunctionFragment;
    "allClaims(uint256)": FunctionFragment;
    "listClaims(address)": FunctionFragment;
    "register(string,string,string,string)": FunctionFragment;
    "registerRef(string,string)": FunctionFragment;
    "remove(string,string,string)": FunctionFragment;
    "removeRef()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "allClaimKeys",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "allClaimRefs",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "allClaims",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "listClaims", values: [string]): string;
  encodeFunctionData(
    functionFragment: "register",
    values: [string, string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "registerRef",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "remove",
    values: [string, string, string]
  ): string;
  encodeFunctionData(functionFragment: "removeRef", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "allClaimKeys",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allClaimRefs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allClaims", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "listClaims", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "register", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerRef",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "remove", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "removeRef", data: BytesLike): Result;

  events: {
    "ClaimRefRemoved(address)": EventFragment;
    "ClaimRefUpdated(address,tuple)": EventFragment;
    "ClaimRemoved(address,string,string)": EventFragment;
    "ClaimUpdated(address,tuple)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ClaimRefRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ClaimRefUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ClaimRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ClaimUpdated"): EventFragment;
}

export type ClaimRefRemovedEvent = TypedEvent<[string] & { claimer: string }>;

export type ClaimRefUpdatedEvent = TypedEvent<
  [string, [string, string] & { ref: string; key: string }] & {
    claimer: string;
    ref: [string, string] & { ref: string; key: string };
  }
>;

export type ClaimRemovedEvent = TypedEvent<
  [string, string, string] & {
    claimer: string;
    propertyType: string;
    propertyId: string;
  }
>;

export type ClaimUpdatedEvent = TypedEvent<
  [
    string,
    [string, string, string, string] & {
      propertyType: string;
      propertyId: string;
      evidence: string;
      method: string;
    }
  ] & {
    claimer: string;
    claim: [string, string, string, string] & {
      propertyType: string;
      propertyId: string;
      evidence: string;
      method: string;
    };
  }
>;

export class RegistryContract extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: RegistryContractInterface;

  functions: {
    allClaimKeys(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    allClaimRefs(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[string, string] & { ref: string; key: string }>;

    allClaims(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, string] & {
        propertyType: string;
        propertyId: string;
        evidence: string;
        method: string;
      }
    >;

    listClaims(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber[], [string, string]]>;

    register(
      propertyType: string,
      propertyId: string,
      evidence: string,
      method: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    registerRef(
      ref: string,
      key: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    remove(
      propertyType: string,
      propertyId: string,
      method: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeRef(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  allClaimKeys(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  allClaimRefs(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<[string, string] & { ref: string; key: string }>;

  allClaims(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, string, string, string] & {
      propertyType: string;
      propertyId: string;
      evidence: string;
      method: string;
    }
  >;

  listClaims(
    account: string,
    overrides?: CallOverrides
  ): Promise<[BigNumber[], [string, string]]>;

  register(
    propertyType: string,
    propertyId: string,
    evidence: string,
    method: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  registerRef(
    ref: string,
    key: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  remove(
    propertyType: string,
    propertyId: string,
    method: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeRef(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    allClaimKeys(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    allClaimRefs(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[string, string] & { ref: string; key: string }>;

    allClaims(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, string] & {
        propertyType: string;
        propertyId: string;
        evidence: string;
        method: string;
      }
    >;

    listClaims(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber[], [string, string]]>;

    register(
      propertyType: string,
      propertyId: string,
      evidence: string,
      method: string,
      overrides?: CallOverrides
    ): Promise<void>;

    registerRef(
      ref: string,
      key: string,
      overrides?: CallOverrides
    ): Promise<void>;

    remove(
      propertyType: string,
      propertyId: string,
      method: string,
      overrides?: CallOverrides
    ): Promise<void>;

    removeRef(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "ClaimRefRemoved(address)"(
      claimer?: null
    ): TypedEventFilter<[string], { claimer: string }>;

    ClaimRefRemoved(
      claimer?: null
    ): TypedEventFilter<[string], { claimer: string }>;

    "ClaimRefUpdated(address,tuple)"(
      claimer?: null,
      ref?: null
    ): TypedEventFilter<
      [string, [string, string] & { ref: string; key: string }],
      { claimer: string; ref: [string, string] & { ref: string; key: string } }
    >;

    ClaimRefUpdated(
      claimer?: null,
      ref?: null
    ): TypedEventFilter<
      [string, [string, string] & { ref: string; key: string }],
      { claimer: string; ref: [string, string] & { ref: string; key: string } }
    >;

    "ClaimRemoved(address,string,string)"(
      claimer?: null,
      propertyType?: null,
      propertyId?: null
    ): TypedEventFilter<
      [string, string, string],
      { claimer: string; propertyType: string; propertyId: string }
    >;

    ClaimRemoved(
      claimer?: null,
      propertyType?: null,
      propertyId?: null
    ): TypedEventFilter<
      [string, string, string],
      { claimer: string; propertyType: string; propertyId: string }
    >;

    "ClaimUpdated(address,tuple)"(
      claimer?: null,
      claim?: null
    ): TypedEventFilter<
      [
        string,
        [string, string, string, string] & {
          propertyType: string;
          propertyId: string;
          evidence: string;
          method: string;
        }
      ],
      {
        claimer: string;
        claim: [string, string, string, string] & {
          propertyType: string;
          propertyId: string;
          evidence: string;
          method: string;
        };
      }
    >;

    ClaimUpdated(
      claimer?: null,
      claim?: null
    ): TypedEventFilter<
      [
        string,
        [string, string, string, string] & {
          propertyType: string;
          propertyId: string;
          evidence: string;
          method: string;
        }
      ],
      {
        claimer: string;
        claim: [string, string, string, string] & {
          propertyType: string;
          propertyId: string;
          evidence: string;
          method: string;
        };
      }
    >;
  };

  estimateGas: {
    allClaimKeys(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    allClaimRefs(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    allClaims(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    listClaims(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    register(
      propertyType: string,
      propertyId: string,
      evidence: string,
      method: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    registerRef(
      ref: string,
      key: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    remove(
      propertyType: string,
      propertyId: string,
      method: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeRef(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    allClaimKeys(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    allClaimRefs(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    allClaims(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    listClaims(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    register(
      propertyType: string,
      propertyId: string,
      evidence: string,
      method: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    registerRef(
      ref: string,
      key: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    remove(
      propertyType: string,
      propertyId: string,
      method: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeRef(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
